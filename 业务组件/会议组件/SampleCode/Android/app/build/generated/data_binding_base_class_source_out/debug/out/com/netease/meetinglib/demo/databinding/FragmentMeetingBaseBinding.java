// Generated by view binder compiler. Do not edit!
package com.netease.meetinglib.demo.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.netease.meetinglib.demo.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentMeetingBaseBinding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  @NonNull
  public final Button actionBtn;

  @NonNull
  public final Button actionToMeetingSettings;

  @NonNull
  public final Button addInjectedMenuItem;

  @NonNull
  public final CheckBox audioOption;

  @NonNull
  public final Button configMoreMenus;

  @NonNull
  public final Button configToolbarMenus;

  @NonNull
  public final CheckBox defaultWhiteBoard;

  @NonNull
  public final EditText firstEditor;

  @NonNull
  public final EditText fourthEditor;

  @NonNull
  public final EditText injectedMenuIdEdx;

  @NonNull
  public final EditText injectedMenuTitleEdx;

  @NonNull
  public final FrameLayout joinMeetingFragment;

  @NonNull
  public final CheckBox noChatOptions;

  @NonNull
  public final CheckBox noCloudRecord;

  @NonNull
  public final CheckBox noGalleryOptions;

  @NonNull
  public final CheckBox noInviteOptions;

  @NonNull
  public final CheckBox noMinimize;

  @NonNull
  public final CheckBox noRename;

  @NonNull
  public final CheckBox noSwitchAudioMode;

  @NonNull
  public final CheckBox noSwitchCamera;

  @NonNull
  public final CheckBox noWhiteBoard;

  @NonNull
  public final EditText secondEditor;

  @NonNull
  public final CheckBox showLongMeetingIdOnly;

  @NonNull
  public final CheckBox showMeetingTime;

  @NonNull
  public final CheckBox showShortMeetingIdOnly;

  @NonNull
  public final EditText thirdEditor;

  @NonNull
  public final TextView title;

  @NonNull
  public final CheckBox useDefaultOptions;

  @NonNull
  public final CheckBox usePersonalMeetingId;

  @NonNull
  public final CheckBox videoOption;

  private FragmentMeetingBaseBinding(@NonNull FrameLayout rootView, @NonNull Button actionBtn,
      @NonNull Button actionToMeetingSettings, @NonNull Button addInjectedMenuItem,
      @NonNull CheckBox audioOption, @NonNull Button configMoreMenus,
      @NonNull Button configToolbarMenus, @NonNull CheckBox defaultWhiteBoard,
      @NonNull EditText firstEditor, @NonNull EditText fourthEditor,
      @NonNull EditText injectedMenuIdEdx, @NonNull EditText injectedMenuTitleEdx,
      @NonNull FrameLayout joinMeetingFragment, @NonNull CheckBox noChatOptions,
      @NonNull CheckBox noCloudRecord, @NonNull CheckBox noGalleryOptions,
      @NonNull CheckBox noInviteOptions, @NonNull CheckBox noMinimize, @NonNull CheckBox noRename,
      @NonNull CheckBox noSwitchAudioMode, @NonNull CheckBox noSwitchCamera,
      @NonNull CheckBox noWhiteBoard, @NonNull EditText secondEditor,
      @NonNull CheckBox showLongMeetingIdOnly, @NonNull CheckBox showMeetingTime,
      @NonNull CheckBox showShortMeetingIdOnly, @NonNull EditText thirdEditor,
      @NonNull TextView title, @NonNull CheckBox useDefaultOptions,
      @NonNull CheckBox usePersonalMeetingId, @NonNull CheckBox videoOption) {
    this.rootView = rootView;
    this.actionBtn = actionBtn;
    this.actionToMeetingSettings = actionToMeetingSettings;
    this.addInjectedMenuItem = addInjectedMenuItem;
    this.audioOption = audioOption;
    this.configMoreMenus = configMoreMenus;
    this.configToolbarMenus = configToolbarMenus;
    this.defaultWhiteBoard = defaultWhiteBoard;
    this.firstEditor = firstEditor;
    this.fourthEditor = fourthEditor;
    this.injectedMenuIdEdx = injectedMenuIdEdx;
    this.injectedMenuTitleEdx = injectedMenuTitleEdx;
    this.joinMeetingFragment = joinMeetingFragment;
    this.noChatOptions = noChatOptions;
    this.noCloudRecord = noCloudRecord;
    this.noGalleryOptions = noGalleryOptions;
    this.noInviteOptions = noInviteOptions;
    this.noMinimize = noMinimize;
    this.noRename = noRename;
    this.noSwitchAudioMode = noSwitchAudioMode;
    this.noSwitchCamera = noSwitchCamera;
    this.noWhiteBoard = noWhiteBoard;
    this.secondEditor = secondEditor;
    this.showLongMeetingIdOnly = showLongMeetingIdOnly;
    this.showMeetingTime = showMeetingTime;
    this.showShortMeetingIdOnly = showShortMeetingIdOnly;
    this.thirdEditor = thirdEditor;
    this.title = title;
    this.useDefaultOptions = useDefaultOptions;
    this.usePersonalMeetingId = usePersonalMeetingId;
    this.videoOption = videoOption;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentMeetingBaseBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentMeetingBaseBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_meeting_base, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentMeetingBaseBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.actionBtn;
      Button actionBtn = rootView.findViewById(id);
      if (actionBtn == null) {
        break missingId;
      }

      id = R.id.action_to_meeting_settings;
      Button actionToMeetingSettings = rootView.findViewById(id);
      if (actionToMeetingSettings == null) {
        break missingId;
      }

      id = R.id.addInjectedMenuItem;
      Button addInjectedMenuItem = rootView.findViewById(id);
      if (addInjectedMenuItem == null) {
        break missingId;
      }

      id = R.id.audioOption;
      CheckBox audioOption = rootView.findViewById(id);
      if (audioOption == null) {
        break missingId;
      }

      id = R.id.configMoreMenus;
      Button configMoreMenus = rootView.findViewById(id);
      if (configMoreMenus == null) {
        break missingId;
      }

      id = R.id.configToolbarMenus;
      Button configToolbarMenus = rootView.findViewById(id);
      if (configToolbarMenus == null) {
        break missingId;
      }

      id = R.id.defaultWhiteBoard;
      CheckBox defaultWhiteBoard = rootView.findViewById(id);
      if (defaultWhiteBoard == null) {
        break missingId;
      }

      id = R.id.firstEditor;
      EditText firstEditor = rootView.findViewById(id);
      if (firstEditor == null) {
        break missingId;
      }

      id = R.id.fourthEditor;
      EditText fourthEditor = rootView.findViewById(id);
      if (fourthEditor == null) {
        break missingId;
      }

      id = R.id.injectedMenuIdEdx;
      EditText injectedMenuIdEdx = rootView.findViewById(id);
      if (injectedMenuIdEdx == null) {
        break missingId;
      }

      id = R.id.injectedMenuTitleEdx;
      EditText injectedMenuTitleEdx = rootView.findViewById(id);
      if (injectedMenuTitleEdx == null) {
        break missingId;
      }

      FrameLayout joinMeetingFragment = (FrameLayout) rootView;

      id = R.id.noChatOptions;
      CheckBox noChatOptions = rootView.findViewById(id);
      if (noChatOptions == null) {
        break missingId;
      }

      id = R.id.noCloudRecord;
      CheckBox noCloudRecord = rootView.findViewById(id);
      if (noCloudRecord == null) {
        break missingId;
      }

      id = R.id.noGalleryOptions;
      CheckBox noGalleryOptions = rootView.findViewById(id);
      if (noGalleryOptions == null) {
        break missingId;
      }

      id = R.id.noInviteOptions;
      CheckBox noInviteOptions = rootView.findViewById(id);
      if (noInviteOptions == null) {
        break missingId;
      }

      id = R.id.no_minimize;
      CheckBox noMinimize = rootView.findViewById(id);
      if (noMinimize == null) {
        break missingId;
      }

      id = R.id.noRename;
      CheckBox noRename = rootView.findViewById(id);
      if (noRename == null) {
        break missingId;
      }

      id = R.id.noSwitchAudioMode;
      CheckBox noSwitchAudioMode = rootView.findViewById(id);
      if (noSwitchAudioMode == null) {
        break missingId;
      }

      id = R.id.noSwitchCamera;
      CheckBox noSwitchCamera = rootView.findViewById(id);
      if (noSwitchCamera == null) {
        break missingId;
      }

      id = R.id.noWhiteBoard;
      CheckBox noWhiteBoard = rootView.findViewById(id);
      if (noWhiteBoard == null) {
        break missingId;
      }

      id = R.id.secondEditor;
      EditText secondEditor = rootView.findViewById(id);
      if (secondEditor == null) {
        break missingId;
      }

      id = R.id.showLongMeetingIdOnly;
      CheckBox showLongMeetingIdOnly = rootView.findViewById(id);
      if (showLongMeetingIdOnly == null) {
        break missingId;
      }

      id = R.id.show_meeting_time;
      CheckBox showMeetingTime = rootView.findViewById(id);
      if (showMeetingTime == null) {
        break missingId;
      }

      id = R.id.showShortMeetingIdOnly;
      CheckBox showShortMeetingIdOnly = rootView.findViewById(id);
      if (showShortMeetingIdOnly == null) {
        break missingId;
      }

      id = R.id.thirdEditor;
      EditText thirdEditor = rootView.findViewById(id);
      if (thirdEditor == null) {
        break missingId;
      }

      id = R.id.title;
      TextView title = rootView.findViewById(id);
      if (title == null) {
        break missingId;
      }

      id = R.id.useDefaultOptions;
      CheckBox useDefaultOptions = rootView.findViewById(id);
      if (useDefaultOptions == null) {
        break missingId;
      }

      id = R.id.usePersonalMeetingId;
      CheckBox usePersonalMeetingId = rootView.findViewById(id);
      if (usePersonalMeetingId == null) {
        break missingId;
      }

      id = R.id.videoOption;
      CheckBox videoOption = rootView.findViewById(id);
      if (videoOption == null) {
        break missingId;
      }

      return new FragmentMeetingBaseBinding((FrameLayout) rootView, actionBtn,
          actionToMeetingSettings, addInjectedMenuItem, audioOption, configMoreMenus,
          configToolbarMenus, defaultWhiteBoard, firstEditor, fourthEditor, injectedMenuIdEdx,
          injectedMenuTitleEdx, joinMeetingFragment, noChatOptions, noCloudRecord, noGalleryOptions,
          noInviteOptions, noMinimize, noRename, noSwitchAudioMode, noSwitchCamera, noWhiteBoard,
          secondEditor, showLongMeetingIdOnly, showMeetingTime, showShortMeetingIdOnly, thirdEditor,
          title, useDefaultOptions, usePersonalMeetingId, videoOption);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
